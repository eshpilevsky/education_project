{"version":3,"sources":["Spotlights.js"],"names":["logger","Logger","Spotlights","maxSpotlights","signalingSocket","_signalingSocket","_maxSpotlights","_peerList","_unmutablePeerList","_selectedSpotlights","_currentSpotlights","_started","this","_handleSignaling","_spotlightsUpdated","peers","peer","_newPeer","id","peerId","indexOf","newSelectedPeer","length","index","i","includes","debug","on","notification","method","data","_closePeer","push","filter","speakerList","Set","splice","concat","spotlights","_arraysEqual","slice","emit","arr1","arr2","oldMaxSpotlights","EventEmitter"],"mappings":"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","file":"static/js/spotlights.655b4b85.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\nimport Logger from './Logger';\n\nconst logger = new Logger('Spotlight');\n\nexport default class Spotlights extends EventEmitter\n{\n\tconstructor(maxSpotlights, signalingSocket)\n\t{\n\t\tsuper();\n\n\t\tthis._signalingSocket = signalingSocket;\n\t\tthis._maxSpotlights = maxSpotlights;\n\t\tthis._peerList = [];\n\t\tthis._unmutablePeerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._currentSpotlights = [];\n\t\tthis._started = false;\n\t}\n\n\tstart()\n\t{\n\t\tthis._handleSignaling();\n\n\t\tthis._started = true;\n\t\tthis._spotlightsUpdated();\n\t}\n\n\taddPeers(peers)\n\t{\n\t\tfor (const peer of peers)\n\t\t{\n\t\t\tthis._newPeer(peer.id);\n\t\t}\n\t}\n\n\tpeerInSpotlights(peerId)\n\t{\n\t\tif (this._started)\n\t\t{\n\t\t\treturn this._currentSpotlights.indexOf(peerId) !== -1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tgetNextAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex++;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index >= this._unmutablePeerList.length)\n\t\t\t\t{\n\t\t\t\t\tindex = 0;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tgetPrevAsSelected(peerId)\n\t{\n\t\tlet newSelectedPeer = null;\n\n\t\tif (peerId == null && this._unmutablePeerList.length > 0)\n\t\t{\n\t\t\tpeerId = this._unmutablePeerList[0];\n\t\t}\n\n\t\tif (peerId != null && this._currentSpotlights.length < this._unmutablePeerList.length)\n\t\t{\n\t\t\tconst oldIndex = this._unmutablePeerList.indexOf(peerId);\n\n\t\t\tlet index = oldIndex;\n\n\t\t\tindex--;\n\t\t\tfor (let i = 0; i < this._unmutablePeerList.length; i++)\n\t\t\t{\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tindex = this._unmutablePeerList.length - 1;\n\t\t\t\t}\n\t\t\t\tnewSelectedPeer = this._unmutablePeerList[index];\n\t\t\t\tif (!this._currentSpotlights.includes(newSelectedPeer))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\treturn newSelectedPeer;\n\t}\n\n\tsetPeerSpotlight(peerId)\n\t{\n\t\tlogger.debug('setPeerSpotlight() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._selectedSpotlights.indexOf(peerId);\n\n\t\tif (index !== -1)\n\t\t{\n\t\t\tthis._selectedSpotlights = [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._selectedSpotlights = [ peerId ];\n\t\t}\n\n\t\t/*\n\t\tif (index === -1) // We don't have this peer in the list, adding\n\t\t{\n\t\t\tthis._selectedSpotlights.push(peerId);\n\t\t}\n\t\telse // We have this peer, remove\n\t\t{\n\t\t\tthis._selectedSpotlights.splice(index, 1);\n\t\t}\n\t\t*/\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\t_handleSignaling()\n\t{\n\t\tthis._signalingSocket.on('notification', (notification) =>\n\t\t{\n\t\t\tif (notification.method === 'newPeer')\n\t\t\t{\n\t\t\t\tconst { id } = notification.data;\n\n\t\t\t\tthis._newPeer(id);\n\t\t\t}\n\n\t\t\tif (notification.method === 'peerClosed')\n\t\t\t{\n\t\t\t\tconst { peerId } = notification.data;\n\n\t\t\t\tthis._closePeer(peerId);\n\t\t\t}\n\t\t});\n\t}\n\n\tclearSpotlights()\n\t{\n\t\tthis._started = false;\n\n\t\tthis._peerList = [];\n\t\tthis._selectedSpotlights = [];\n\t\tthis._currentSpotlights = [];\n\t}\n\n\t_newPeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"newpeer\" event [id: \"%s\"]', id);\n\n\t\tif (this._peerList.indexOf(id) === -1) // We don't have this peer in the list\n\t\t{\n\t\t\tlogger.debug('_handlePeer() | adding peer [peerId: \"%s\"]', id);\n\n\t\t\tthis._peerList.push(id);\n\t\t\tthis._unmutablePeerList.push(id);\n\n\t\t\tif (this._started)\n\t\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\n\t_closePeer(id)\n\t{\n\t\tlogger.debug(\n\t\t\t'room \"peerClosed\" event [peerId:%o]', id);\n\n\t\tthis._peerList = this._peerList.filter((peer) => peer !== id);\n\t\tthis._unmutablePeerList = this._unmutablePeerList.filter((peer) => peer !== id);\n\n\t\tthis._selectedSpotlights = this._selectedSpotlights.filter((peer) => peer !== id);\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\taddSpeakerList(speakerList)\n\t{\n\t\tthis._peerList = [ ...new Set([ ...speakerList, ...this._peerList ]) ];\n\n\t\tif (this._started)\n\t\t\tthis._spotlightsUpdated();\n\t}\n\n\thandleActiveSpeaker(peerId)\n\t{\n\t\tlogger.debug('handleActiveSpeaker() [peerId:\"%s\"]', peerId);\n\n\t\tconst index = this._peerList.indexOf(peerId);\n\n\t\tif (index > -1)\n\t\t{\n\t\t\tthis._peerList.splice(index, 1);\n\t\t\tthis._peerList = [ peerId ].concat(this._peerList);\n\n\t\t\tthis._spotlightsUpdated();\n\t\t}\n\t}\n\n\t_spotlightsUpdated()\n\t{\n\t\tlet spotlights;\n\n\t\tif (this._selectedSpotlights.length > 0)\n\t\t{\n\t\t\tspotlights = [ ...new Set([ ...this._selectedSpotlights, ...this._peerList ]) ];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tspotlights = this._peerList;\n\t\t}\n\n\t\tif (\n\t\t\t!this._arraysEqual(\n\t\t\t\tthis._currentSpotlights, spotlights.slice(0, this._maxSpotlights)\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights updated, emitting');\n\n\t\t\tthis._currentSpotlights = spotlights.slice(0, this._maxSpotlights);\n\t\t\tthis.emit('spotlights-updated', this._currentSpotlights);\n\t\t}\n\t\telse\n\t\t\tlogger.debug('_spotlightsUpdated() | spotlights not updated');\n\t}\n\n\t_arraysEqual(arr1, arr2)\n\t{\n\t\tif (arr1.length !== arr2.length)\n\t\t\treturn false;\n\n\t\tfor (let i = arr1.length; i--;)\n\t\t{\n\t\t\tif (arr1[i] !== arr2[i])\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget maxSpotlights()\n\t{\n\t\treturn this._maxSpotlights;\n\t}\n\n\tset maxSpotlights(maxSpotlights)\n\t{\n\t\tconst oldMaxSpotlights = this._maxSpotlights;\n\n\t\tthis._maxSpotlights = maxSpotlights;\n\n\t\tif (oldMaxSpotlights !== this._maxSpotlights)\n\t\t\tthis._spotlightsUpdated();\n\t}\n}\n"],"sourceRoot":""}